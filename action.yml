name: 'Grade Homework'
description: 'Request homework grade for late submissions'

inputs:
  access_token:
    description: 'Authentication token to access repositories'
    required: true
  artifact_name:
    description: 'Name of artifact'
    required: true
  artifact_json:
    description: 'Name of artifact JSON file'
    required: true
  workflow_name:
    description: 'Name of workflow'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Parse Issue
      id: parse-issue
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          try {
            core.info(`Parsing issue body...`);
            const body = context.payload.issue.body;
            // const pattern = /```json([^`]+)```/;
            // const matched = body.match(pattern);

            const pattern = /^### Full Name\s+([^\n]+)\s+### USF Email\s+([^\n]+)\b\s*$/;
            const matched = body.match(pattern);
            core.info(matched);

            if (matched !== null && matched.length === 3) {
              try {
                const parsed = {
                  'name': matched[1],
                  'email': matched[2],
                };

                if (parsed.hasOwnProperty('runid')) {
                  core.exportVariable('GRADE_RUNID', `${parsed.runid}`);
                }

                if (parsed.hasOwnProperty('name') && parsed.hasOwnProperty('email')) {
                  core.info(JSON.stringify(parsed));
                  return JSON.stringify(parsed);
                }

                core.exportVariable('ERROR_MESSAGE', `Required "name" and "email" properties missing from issue body.`);
                core.setFailed(process.env.ERROR_MESSAGE);
              }
              catch (error) {
                core.exportVariable('ERROR_MESSAGE', `Unable to parse issue body. Error: ${error.message}`);
                core.setFailed(process.env.ERROR_MESSAGE);
              }
            }
            else {
              core.exportVariable('ERROR_MESSAGE', `Unable to find student details from issue body. Found: ${matched}`);
              core.setFailed(process.env.ERROR_MESSAGE);
            }
          }
          catch (error) {
            core.exportVariable('ERROR_MESSAGE', error.message);
            core.setFailed(process.env.ERROR_MESSAGE);
          }

    - name: Check Results
      id: check-results
      uses: usf-cs272-spring2023/action-check-results@main
      with:
        access_token:  "${{ inputs.access_token }}"
        artifact_name: "${{ inputs.artifact_name }}"
        artifact_json: "${{ inputs.artifact_json }}"
        workflow_name: "${{ inputs.workflow_name }}"
        workflow_run:  "${{ env.GRADE_RUNID }}"

    - name: Check Success
      uses: actions/github-script@v6
      env:
        STUDENT_JSON: "${{ steps.parse-issue.outputs.result }}"
        RESULTS_JSON: "${{ steps.check-results.outputs.json_string }}"
      with:
        script: |
          try {
            const student = JSON.parse(process.env.STUDENT_JSON);
            const results = JSON.parse(process.env.RESULTS_JSON);

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `
          :octocat: @${context.actor} your grade request has been processed! See the details below:

          |  |  |
          |----:|:-----|
          |   Student: | ${student.name} |
          | USF Email: | \`${student.email}\` |
          | | |
          | Assignment: | ${results.assignment_name} |
          |   Deadline: | ${results.deadline_text} |
          |  Submitted: | ${results.submitted_text} |
          |   Workflow: | [Run ${results.workflow_run}](${context.payload.repository.html_url}/actions/runs/${results.workflow_run}) |
          | | |
          | Late Interval: | ${results.late_interval} hours (x${results.late_multiplier} multiplier) |
          | Late Penalty:  | -${results.late_points} points (-${results.late_percent}%) |
          | Late Grade:    | **${results.grade_points}** / ${results.grade_possible} points (${results.grade_percent}%) |

          You will receive a notice once your grade has been updated on Canvas.
              `
            });

            let assignees = ['halenander', 'mtquach2', 'ybsolomon'];

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'open',
              labels: ['grade-homework'],
              assignees: assignees
            });
          }
          catch (error) {
            core.exportVariable('ERROR_MESSAGE', error.message);
            core.setFailed(process.env.ERROR_MESSAGE);
          }

    - name: Check Failure
      uses: actions/github-script@v6
      if: ${{ failure() }}
      with:
        script: |
          try {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `
          :stop_sign: @${context.actor} there was a problem with your request:

          > ${process.env.ERROR_MESSAGE}

          See [run ${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details. After the problems have been addressed, remove the \`error\` label and re-open this issue.
              `
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed',
              labels: ['error'],
              assignees: [context.actor]
            });
          }
          catch (error) {
            core.exportVariable('ERROR_MESSAGE', error.message);
            core.setFailed(process.env.ERROR_MESSAGE);
          }